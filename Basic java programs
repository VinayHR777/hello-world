/*program to add two numbers*/
class Calculator{

	public static int add(int num1, int num2){

		return num1 + num2;
	}
}


class Test{

	public static void main(String[] args) {
		int num1 = 50;
		int num2 = 25; 
		System.out.println(Calculator.add(num1,num2));
	}
}

/* result:
75	*/

----------------------------------------------------
/* program to add three numbers */

class Calculator{

	public static int add(int num1, int num2, int num3){

		return num1 + num2 + num3;
	}
}

class Test{

	public static void main(String[] args) {
		int num1 = 50;
		int num2 = 25;
		int num3 = 25; 
		System.out.println(Calculator.add(num1, num2, num3));
	}
}

/* result:
100	*/
-------------------------------------------------------
/* program to add two double numbers*/

class Calculator{

	public static double add(double num1, double num2){

		return num1 + num2 ;
	}
}

class Test{

	public static void main(String[] args) {
		double num1 = 50.6;
		double num2 = 25.5;
		System.out.println(Calculator.add(num1, num2));
	}
}

/* result:
76.1		*/

-----------------------------------------------------
/* program to calculate speed using time and distance */

class SpeedCalculator{

	public static double calculateSpeed(double distanceTravelledInKms, double timeTakenInHours){

		double speed = distanceTravelledInKms/timeTakenInHours;
		return speed ;
	}
}

class Test{

	public static void main(String[] args) {
		double distanceTravelledInKms = 50.6;
		double timeTakenInHours = 1.5;
		double speed = SpeedCalculator.calculateSpeed(distanceTravelledInKms, timeTakenInHours);
		System.out.println("speed is " + speed + " km/hr");
	}
}

/* result:
speed is 33.733333333333334 km/hr	*/

-----------------------------------------------------------
/* program to calculate area of circle */

class AreaOfCircle{

	public static double calculateAreaOfCircle(double radiusInCms){

		double PI = 3.14;
		double areaOfCircle;

		areaOfCircle = PI * radiusInCms * radiusInCms;

		return areaOfCircle;
	}
}

class Test{

	public static void main(String[] args) {
		double radiusInCms = 4.5;
		double areaOfCircleInCms = AreaOfCircle.calculateAreaOfCircle(radiusInCms);
		System.out.println("Area of circle is " + areaOfCircleInCms + " cms");
	}
}

/* result:
Area of circle is 63.585 cms	*/
-----------------------------------------------------
/* program to calculate factorial of a number */

class Factorial{

	public static int calculateFactorial(int number){

		if(number > 1){
			return number * calculateFactorial(number - 1);
		}

		return 1;
	}
}

class Test{

	public static void main(String[] args) {
		int number = 10;
		int factorial = Factorial.calculateFactorial(number);
		System.out.println("Factorial of " + number + " is " + factorial);
	}
}

/* result:
Factorial of 10 is 3628800  */
------------------------------------------------------

/* program to find whether a number is even or not */

class EvenOrNot{

	public static boolean isEven(int number){

		return (number%2 == 0) ? true : false; 
	}
}

class Test{

	public static void main(String[] args) {
		
		int number = 23;
		boolean even = EvenOrNot.isEven(number);

		if(even)
			System.out.println(number + " is an even number.");
		else
			System.out.println(number + " is not an even number.");			

	}
}

/* result:
23 is not an even number	*/
-----------------------------------------------------------
/* program to find whether a number is Odd or not */

class OddOrNot{

	public static boolean isOdd(int number){

		return (number%2 != 0) ? true : false; 
	}
}

class Test{

	public static void main(String[] args) {
		
		int number = 24;
		boolean odd = OddOrNot.isOdd(number);

		if(odd)
			System.out.println(number + " is an odd number.");
		else
			System.out.println(number + " is not an odd number.");			

	}
}


/* result:
24 is not an odd number.	*/
-----------------------------------------------------------
/* program to find whether a number is prime */

class PrimeNumber{

	public static boolean isPrime(int number){

		boolean prime = true;
		if (number == 1) {
			prime = false;
			return prime;
		}
		for(int count=2; count<=(number/2); count++) {
			if (number%count == 0) {
				prime = false;
				return prime;
			}
		}

		return prime;
	}
}


class Test{

	public static void main(String[] args) {
		
		int number = 2;
		boolean prime = PrimeNumber.isPrime(number);

		if(prime)
			System.out.println(number + " is a prime.");
		else
			System.out.println(number + " is not a prime.");			

	}
}


/* result:
2 is a prime.	*/
----------------------------------------------------------
/* program to find whether a number is palindrome or not */

class PalindromeOrNot{

		
	public static boolean isPalindrome(int number){
		boolean palindrome = false;
		int reversedNumber = 0;
		int temp = number;

		while(temp != 0){
			reversedNumber = (reversedNumber*10) + (temp%10) ;
			temp = temp/10;
		}

		if (number == reversedNumber){
			palindrome = true;
		}

		return palindrome;

	}
}


class Test{

	public static void main(String[] args) {
		
		int number = 2344032;
		boolean palindrome = PalindromeOrNot.isPalindrome(number);

		if(palindrome)
			System.out.println(number + " is a palindrome.");
		else
			System.out.println(number + " is not a palindrome.");			

	}
}


/* result:
234432 is a palindrome.	*/
----------------------------------------------------------------
/* Fibonacci series for given number of elements */

class FibonacciSeries{

	public static String createFibonacciSeries(int numberOfElements){

		String fibonacciSeries = "";
		int currentNumber = 0;
		int nextNumber = 1;
		int temp;

		for (int count=1; count<=numberOfElements; count++) {
			fibonacciSeries = fibonacciSeries +  currentNumber + ", ";
			temp = currentNumber;
			currentNumber = nextNumber;
			nextNumber = temp + currentNumber;
		}

	return fibonacciSeries;

	}
}

class Test{

	public static void main(String[] args) {
		
		int numberOfElements = 10;
		String fibonacciSeries = FibonacciSeries.createFibonacciSeries(numberOfElements);

		System.out.println("Fibonacci series for " + numberOfElements + " elements is:\n" + fibonacciSeries);

	}
}

/* result:
Fibonacci series for 10 elements is:
0, 1, 1, 2, 3, 5, 8, 13, 21, 34,	*/
---------------------------------------------------------------
/* program to find whether the number is divisible by 6 or not */
class DivisibleBySixOrNot{

	public static boolean isDivisibleBySix(int number){

		return  ((number%6) == 0) ? true : false;
		

	}
}

class Test{

	public static void main(String[] args) {
		
		int number = 36;
		boolean divisibleBySix = DivisibleBySixOrNot.isDivisibleBySix(number);

		if (divisibleBySix){
			System.out.println(number + " is divisible by 6.");
		}

		else {
			System.out.println(number + " is not divisible by 6.");
		}

	}
}

/* result:
36 is divisible by 6.	*/
------------------------------------------------------------

/* program to convert seconds to hours */

class SecondsToHours{

	public static double convertSecondsToHours(int seconds){

		return seconds/(60.0 * 60.0);
		

	}
}

class Test{

	public static void main(String[] args) {
		
		int seconds = 3690;
		double hours = SecondsToHours.convertSecondsToHours(seconds);

		System.out.println(seconds + " seconds equal to " + hours + " hours");

	}
}

/* result:
3690 seconds equal to 1.025 hours	*/
------------------------------------------------------------
/* program to count number of digits in an integer */

class NoOfDigits{

	public static int countNoOfDigits(int number){

		int numberOfDigits = 0;

		if (number == 0) {
			numberOfDigits = 1;
		}

		while(number != 0){
			number = number / 10;
			numberOfDigits += 1;
		}
		
		return numberOfDigits;
	}
}


class Test{

	public static void main(String[] args) {
		
		int number = 361390;
		int numberOfDigits = NoOfDigits.countNoOfDigits(number);

		System.out.println(" Number of digits in the integer " + number + "(is/are) " + numberOfDigits);

	}
}

/* result:
Number of digits in the integer 361390 (is/are) 6	*/
------------------------------------------------------
/* program to find the digits which are twice in a number */
-------------------------------------------------------
/* program to count number of digits in an integer*/

class NoOfDigits{

	public static int countNoOfDigits(int number){

		int numberOfDigits = 0;

		if (number == 0) {
			numberOfDigits = 1;
		}

		while(number != 0){
			number = number / 10;
			numberOfDigits += 1;
		}
		
		return numberOfDigits;
	}
}


class Test{

	public static void main(String[] args) {
		
		int number = 361390;
		int numberOfDigits = NoOfDigits.countNoOfDigits(number);

		System.out.println(" Number of digits in the integer " + number + "(is/are) " + numberOfDigits);

	}
}

/* result:
Number of digits in the integer 361390 (is/are) 6	*/
------------------------------------------------------------
/* program to find value of hundredth digit in a four digit number */ 

class ValueOfHundredthDigit{

	public static int findHundredthDigitValue(int number){

		int hundredthDigit;
		number = number/100;
		hundredthDigit = number % 10;
		return hundredthDigit * 100;
	}
	
}

class Test{

	public static void main(String[] args) {
		
		int number = 3613;
		int valueOfHundredthDigit = ValueOfHundredthDigit.findHundredthDigitValue(number);
		System.out.println("value of hundredth digit in number " + number + " is " + valueOfHundredthDigit + ".");

	}
}

/* result:
value of hundredth digit in number 3613 is 600.	*/
------------------------------------------------------------
/* program to calculate runrate */

class RunrateCalculator{

	public static double calculateRunrate(int target, int maxOver, int currentScore, int oversBowled){

		return (target - currentScore)/((maxOver-oversBowled)*6.0);
	}
}

class Test{

	public static void main(String[] args) {
		
		int target = 312;
		int maxOver = 50;
		int currentScore = 112;
		int oversBowled = 20;

		double requiredRunrate = RunrateCalculator.calculateRunrate(target, maxOver, currentScore, oversBowled);

		System.out.println("Required runrate is : " + requiredRunrate);
	}
}

/* result:
Required runrate is : 1.1111111111111112	*/
----------------------------------------------------------
/* Program to create decimal like a.bc using three numbers a, b & c */

class MakeDecimal{

	public static double createDecimal(int num1, int num2, int num3){

		return num1 + (num2 / 10.0) + (num3 / 100.0);
	}
}

class Test{

	public static void main(String[] args) {
		
		int num1 = 1;
		int num2 = 2;
		int num3 = 3;

		double decimalNumber = MakeDecimal.createDecimal(num1, num2, num3);

		System.out.println("Decimal number created is " + decimalNumber);
	}
}

/* result:
Decimal number created is 1.23	*/
-----------------------------------------------------------
/* Addition of two digits of a two digit number */

class AdditionOfTwoDigits{

	public static int addTwoDigits(int twoDigitNumber){

		return (twoDigitNumber/10) + (twoDigitNumber%10);
	}
}

class Test{

	public static void main(String[] args) {
		
		int twoDigitNumber = 56;
		int sumOfTwoDigits = AdditionOfTwoDigits.addTwoDigits(twoDigitNumber);
		System.out.println("Sum of two digits of the number " + twoDigitNumber + " is : " + sumOfTwoDigits);
	}
}

/* result:
Sum of two digits of the number is : 11		*/
----------------------------------------------------------------
/* program to logically and three booleans */

class AndBoolean{

	public static boolean andBoolean(boolean boolean1, boolean boolean2, boolean boolean3){

		return boolean1 && boolean2 && boolean3;
	}
}

class Test{

	public static void main(String[] args) {
		
		boolean boolean1 = false;
		boolean boolean2 = true;
		boolean boolean3 = true;

		boolean andedBoolean = AndBoolean.andBoolean(boolean1, boolean2, boolean3);

		System.out.println(boolean1 + " && " + boolean2 + " && " + boolean3 + " = " + andedBoolean);
	}
}

/* result: 
false && true && true = false  	*/
--------------------------------------------------------------
/* program to find whether the number is greater than either of two numbers */

class LargerThanEitherNumber{

	public static boolean isGreater(int num, int num1, int num2){

		return num > num1 ? true : (num > num2 ? true : false);
	}
}

class Test{

	public static void main(String[] args) {
		
		int num = 10;
		int num1 = 20;
		int num2 = 30;

		boolean numGreater = LargerThanEitherNumber.isGreater(num, num1, num2);


		System.out.println( numGreater?("The number " + num + " is greater than either of " + num1 + ", " + num2) : ("The number " + num + " is not greater than either of " + num1 + ", " + num2));
		}
}

/* result:
The number 10 is not greater than either of 20, 30	*/
-------------------------------------------------------------------------
/* program to check whether the numbers are in ascending order or not */

class AssendingOrder{

	public static boolean checkAscendingOrder(int num1, int num2, int num3){

		return num1 < num2 ? (num2 < num3 ? true : false) : false;
	}
}

class Test{

	public static void main(String[] args) {
		
		int num1 = 14;
		int num2 = 20;
		int num3 = 18;

		boolean ascendingOrder = AssendingOrder.checkAscendingOrder(num1, num2, num3);

		System.out.println(ascendingOrder ? (num1 + ", " + num2 + " ," + num3 + " are in ascending order") : (num1 + ", " + num2 + " ," + num3 + " are not in ascending order") );
		}
}

/* result:
14, 20 ,18 are not in ascending order	*/
------------------------------------------------------------
/* program to add last four digits of a number */

class SumOfLastFourDigits{

	public static int findSumOfLastFourDigits(int number){

		int sum = 0;
		int reversedNumber = 0;

		while (number != 0){
			reversedNumber = (reversedNumber * 10) + (number % 10);
			number /= 10; 
		}

		for (int i = 0; i < 4; i++) {
			sum += (reversedNumber%10);
			reversedNumber /= 10;
		}

		return sum;
	}
}

class Test{

	public static void main(String[] args) {
		
		int number = 123456789;
		int sumOfLastFourDigits = SumOfLastFourDigits.findSumOfLastFourDigits(number);
		System.out.println("Sum of last four digits of " + number + " is " + sumOfLastFourDigits);
	}
}

/* result:
Sum of last four digits of 123456789 is 10	*/
---------------------------------------------------------
/* program to find area of a square whose diagonal ends are (x1, y1) and (x2, y2) */

class AreaOfSquare{

	public static int findAreaOfSquare(int x1, int y1, int x2, int y2){

		return (x2-x1) * (y2-y1);
	}
}

class Test{

	public static void main(String[] args) {
		
		int x1 = 20;
		int y1 = 30;
		int x2 = 40;
		int y2 = 50;

		int areaOfSquare = AreaOfSquare.findAreaOfSquare(x1, y1, x2, y2) ;

		System.out.println("Area of square whose diagonals are (" + x1 + ", " + y1 + ") and (" + x2 + ", " + y2 + ") is " + areaOfSquare + " square units.");
	}
}

/* result:
Area of square whose diagonals are (20, 30) and (40, 50) is 400 square units.	*/
--------------------------------------------------------------------------------
/* program to create four digit numbers and add them */

class AddNumDigits{

	public static int addFourDigitNumbers(int num1, int num2, int num3){

		int fourDigitNum1;
		int fourDigitNum2;
		int fourDigitNum3;

		fourDigitNum1 = (num1 * 1000) + (num1 * 100)  + (num1 * 10) + num1;
		fourDigitNum2 = (num2 * 1000) + (num2 * 100)  + (num2 * 10) + num2;
		fourDigitNum3 = (num3 * 1000) + (num3 * 100)  + (num3 * 10) + num3;

		return fourDigitNum1 + fourDigitNum2 + fourDigitNum3;
	}
}


class Test{

	public static void main(String[] args) {
		
		int num1 = 2;
		int num2 = 3;
		int num3 = 4;

		int sum = AddNumDigits.addFourDigitNumbers(num1, num2, num3);

		System.out.println("sum of four digit " + num1 + " & " + num2 + " & " + num3 + " is " + sum);
	}
}

/* result:
sum of four digit 2 & 3 & 4 is 9999	*/
------------------------------------------------------------------
/* program to find whether a number is divisible by 3 or 7 */

class DivisibleByThreeOrSeven{

	public static boolean isDivisibleBy3R7(int number){

		return (number % 3 == 0) ? true : ((number % 7 == 0) ? true : false);
	}
}

class Test{

	public static void main(String[] args) {
		
		int number = 14;
		boolean divisibleByThreeOrSeven = DivisibleByThreeOrSeven.isDivisibleBy3R7(number);

		if (divisibleByThreeOrSeven) 
			System.out.println(number + " is divisible by 3 or 7.");
		else
			System.out.println(number + " is not divisible by 3 or 7.");
		}
}

/* result:
14 is divisible by 3 or 7.	*/
---------------------------------------------------------------------------
/* program to find largest of three numbers */

class LargestOfThree{

	public static int findLargestOfThree(int num1, int num2, int num3){

		if ((num1 >= num2) && (num1 >= num3))
		return num1;

		else if ((num2 >= num1) && (num2 >= num3))
		return num2; 

		else 
		return num3;
	}
}

class Test{

	public static void main(String[] args) {
		
		int num1 = 13;
		int num2 = 25;
		int num3 = 23;
		
		int largest = LargestOfThree.findLargestOfThree(num1, num2, num3);

		System.out.println("Largest among " + num1 + ", " + num2 + " & " + num3 + " is " + largest);
	}
}

/* result: 
Largest among 13, 25 & 23 is 25	*/
---------------------------------------------------------------
/* program to find number of days in the month of 2014 	*/

class NumberOfDays{

	public static int findNumberOfDays(int month){

		switch (month) {

			case 1: case 3: case 5: case 7: case 8:
			case 10: case 12 : 
			return 31;

			case 4: case 6: case 9: case 11:
			return  30;

			case 2:
			return 28;

			default:
				return 0;
			
		}
	}
}

class Test{

	public static void main(String[] args) {
		
		int month = 11;

		int numberOfDays = NumberOfDays.findNumberOfDays(month);

		System.out.println(" Number of days in month " + month + " of year 2014 is " + numberOfDays);
	}
}

/* result:
Number of days in month 11 of year 2014 is 30	*/
------------------------------------------------------
/* program to change the case of a character */

class ChangeCharCase{

	public static char changeCharCase(char ch){

		boolean upperCase = false;

		for (int count = 65; count <= 90; count++) {
			if (ch == count)
				upperCase = true;
		}

		if (upperCase)
			return Character.toLowerCase(ch);

		else
			return Character.toUpperCase(ch);
	}
}

class Test{

	public static void main(String[] args) {
		
	char ch = 'z';
	char changedCase = ChangeCharCase.changeCharCase(ch);

	System.out.println("Changed case of " + ch + " is " + changedCase + ".");
	}
}

/* result:
Changed case of z is Z.	*/
-------------------------------------------------------------
/* program to find whether a character is digit or not */

class IsDigit{

	public static boolean isDigit(char ch){

		boolean digit = false;

		for (int count = 48; count <= 57; count++) {
			if (ch == count)
				digit = true;
		}

		return digit;
	}
}


class Test{

	public static void main(String[] args) {
	
		char ch = 'a';
		
		boolean digit = IsDigit.isDigit(ch);

		if (digit)
			System.out.println("'" + ch + "' is a digit.");
		else
			System.out.println("'" +ch + "' is not a digit.");
	}
}

/* result:
 'a' is not a digit.	*/
--------------------------------------------------------------------------
/* program to find the middle character among 3 characters */

class MiddleCharacter{

	public static char findMiddleCharacter(char ch1, char ch2, char ch3){

		if ((ch2>ch1) && (ch2<ch3))
			return ch2;

		else if ((ch1>ch2) && (ch1<ch3))
			return ch1;

		else
			return ch3;
	}
}

class Test{

	public static void main(String[] args) {
	
		char ch1 = 'd';
		char ch2 = 'a';
		char ch3 = 'g';

		char middleCharacter = MiddleCharacter.findMiddleCharacter(ch1, ch2, ch3);

		System.out.println("Middle character among " + ch1 + ", " + ch2 + " & " + ch3 + " is " + middleCharacter + ".");
	} 
}

/* result:
Middle character among d, a & g is d.	*/
---------------------------------------------------------------
/* program to find same last digit in two positive integers */

class SameLastDigits{

	public static boolean areSameLastDigits(int num1, int num2){

		return (num1%10 == num2%10) ? true : false; 
	}
}

class Test{

	public static void main(String[] args) {
	
		int num1 = 46;
		int num2 = 65;

		boolean sameLastTwoDigits = SameLastDigits.areSameLastDigits(num1, num2);

		if (sameLastTwoDigits)
			System.out.println(num1 + " & " + num2 + " have same last digits.");
		else
			System.out.println(num1 + " & " + num2 + " do not have same last digits.");
	} 
}

/* result:
46 & 65 do not have same last two digits.	*/
--------------------------------------------------------------
/* program to find whether sum of two numbers is equal to third one */

class AddForThird{

	public static boolean areSameLastDigits(int num1, int num2, int num3){

		if (num1 == (num2 + num3))
			return true;
		else if (num2 == (num1 + num3))
			return true;
		else if (num3 == (num1 + num2))
			return true;
		else
			return false;
	}
}

class Test{

	public static void main(String[] args) {
	
		int num1 = 12;
		int num2 = 7;
		int num3 = 5;

		boolean sumOfTwoEqualToThird = AddForThird.areSameLastDigits(num1, num2, num3);

		if (sumOfTwoEqualToThird)
			System.out.println("Among " + num1 + ", " + num2 + " & " + num3 + " sum of two equal to third one.");
		else
			System.out.println("Among " + num1 + ", " + num2 + " & " + num3 + " sum of two is not equal to third one.");
	} 
}


/* result:
Among 12, 7 & 5 sum of two equal to third one.	*/
-----------------------------------------------------------------------
/* program to calculate lottery reward */

class LotteryPrize{

	public static int computeReward(int lotteryNumber){

		int reward = 0;

		if ((lotteryNumber%4) == 0)
			reward = 6;

		if ((lotteryNumber%7) == 0)
			reward = 10;

		if (((lotteryNumber%4) == 0) && ((lotteryNumber%7) == 0))
			reward = 20;

		return reward;
	}
}

class Test{

	public static void main(String[] args) {
	
		int lotteryNumber = 28;

		int reward = LotteryPrize.computeReward(lotteryNumber);

		System.out.println("Lottery reward is " + reward);
	} 
}

/* result:
Lottery reward is 20	*/
------------------------------------------------------------------------
/* program to calculate reward out of three lottery tickets */

class LotteryPrize3{

	public static int computeReward(int lotteryNumber){

		int reward = 0;

		if ((lotteryNumber%4) == 0)
			reward = 6;

		if ((lotteryNumber%7) == 0)
			reward = 10;

		if (((lotteryNumber%4) == 0) && ((lotteryNumber%7) == 0))
			reward = 20;

		return reward;
	}
}

class Test{

	public static void main(String[] args) {
	
		int lotteryNumber1 = 28;
		int lotteryNumber2 = 34;
		int lotteryNumber3 = 56;

		int reward = LotteryPrize.computeReward(lotteryNumber1) + LotteryPrize.computeReward(lotteryNumber2) + LotteryPrize.computeReward(lotteryNumber3);

		System.out.println("Lottery reward is " + reward);
	} 
}

/* result:
Lottery reward is 40	*/
------------------------------------------------------------------------------------
/* program to find sum of last three digits of a number */

class SumLast3Digits{

	public static int addLast3Digits(int number){

		int reversedNumber = 0;
		int sumOfLast3Digits = 0;

		while (number != 0){
			reversedNumber = (reversedNumber * 10) + (number%10);
			number /= 10; 
		}

		for (int count = 0; count < 3; count++) {
			sumOfLast3Digits += (reversedNumber%10);
			reversedNumber /= 10; 
		}

		return sumOfLast3Digits;
	}
}

class Test{

	public static void main(String[] args) {
	
		int number = 6568976;

		int sumOfLast3Digits = SumLast3Digits.addLast3Digits(number);

		System.out.println("Sum of last three digits of " + number + " is " + sumOfLast3Digits + ".");
	} 
}

/* result:
Sum of last three digits of 6568976 is 17. 	*/
-------------------------------------------------------------------------
/* Blackjack */

class Blackjack{

	public static int blackjack(int num1, int num2){

		if ((num1 == num2) && ((num1 == 21) || (num1 < 21)))
			return -2;

		else if ((num1 > 21) && (num2 > 21))
			return -1;

		else if ((num1 < 21) && (num2 <21))
			return num1 > num2 ? num1 : num2;

		else if ((num1 < 21) && (num2 > 21))
			return num1;

		else
			return num2;

	}
}

class Test{

	public static void main(String[] args) {
	
		int num1 = 21;
		int num2 = 21;

		int result = Blackjack.blackjack(num1, num2);
		System.out.println(result);
	} 
}

/* result:
-2		*/
----------------------------------------------------------------------------------
/* program to reverse a number */

class Reverse{

	public static int reverseNumber(int number){

		int reversedNumber = 0;

		while(number!=0){
			reversedNumber = (reversedNumber*10) + (number%10);
			number/=10;
		}

		return reversedNumber;
	}
}

class Test{

	public static void main(String[] args) {
	
		int number = 435;

		int reversedNumber = Reverse.reverseNumber(number);

		System.out.println("Reverse of " + number + " is " + reversedNumber + ".");
	} 
}

/* result:
Reverse of 2435 is 534.	*/
------------------------------------------------------------------------
/* program to find whether a number is perfect number or not */

class PerfectNumber{

	public static boolean isPerfectNumber(int number){

		boolean perfectNumber = false;
		int sum = 0;

		for (int i=1; i<=number; i++) {
			if (number%i == 0)
				sum += i;
		}

		return sum == (number * 2 ) ? true : false; 
	}
}

class Test{

	public static void main(String[] args) {
	
		int number = 28;
		boolean perfectNumber = PerfectNumber.isPerfectNumber(number);

		if(perfectNumber)
			System.out.println(number + " is a perfect number.");

		else
			System.out.println(number + " is not a perfect number.");
	} 
}

/* result:
28 is a perfect number.	*/
---------------------------------------------------------------------------------
/* program to generate natural numbers */

class GenerateNaturalNumbers{

	public static String generateNaturalNumbers(int number){

		String naturalNumbers = "";

		for (int count = 1; count <= number; count++) {
			naturalNumbers = naturalNumbers + count + ", ";
		}

		return naturalNumbers;
	}
}

class Test{

	public static void main(String[] args) {
	
		int number = 30;

		System.out.println(GenerateNaturalNumbers.generateNaturalNumbers(number));
	} 
}

/* result:
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
24, 25, 26, 27, 28, 29, 30,	*/
------------------------------------------------------------------
/* program to generate random natural numbers */

class GenerateRandomIntegers{

	public static String generateRandomIntegers(int number){

		String randomIntegers = "";

		for (int count = 1; count<=number; count++) {
			randomIntegers = randomIntegers + (int)(Math.random() * 100) + ", ";
		}

		return randomIntegers;
	}
}

class Test{

	public static void main(String[] args) {
	
		int number = 30;

		System.out.println(GenerateRandomIntegers.generateRandomIntegers(number));
	} 
}

/* result:
31, 8, 13, 49, 37, 63, 70, 74, 53, 18, 33, 13, 37, 38, 91, 69, 9, 85, 64, 45, 32,
 44, 3, 55, 3, 58, 75, 18, 33, 65,	*/
-------------------------------------------------------------------------------------
/* program to generate even numbers between two numbers */

class EvenOrNot{

	public static boolean isEven(int number){

		return (number%2 == 0) ? true : false;
	}
}

class Test{

	public static void main(String[] args) {
	
		int from = 35;
		int to = 78;
		String evenNumbers = "";

		for(int count = from; count<=to; count++){
			if (EvenOrNot.isEven(count) == true)
				evenNumbers = evenNumbers + count + ", ";
		}

		System.out.println("Even numbers between " + from + " & " + to + " are " + evenNumbers);

	} 
}

/* result:
Even numbers between 35 & 78 are 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58,
 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,	*/
----------------------------------------------------------------------------
/* program to generate odd numbers between two numbers */

class OddOrNot{

	public static boolean isOdd(int number){

		return (number%2 != 0) ? true : false;
	}
}

class Test{

	public static void main(String[] args) {
	
		int from = 35;
		int to = 78;
		String oddNumbers = "";

		for(int count = from; count<=to; count++){
			if (OddOrNot.isOdd(count) == true)
				oddNumbers = oddNumbers + count + ", ";
		}

		System.out.println("Odd numbers between " + from + " & " + to + " are " + oddNumbers);

	} 
}

/* result :
Odd numbers between 35 & 78 are 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57,
59, 61, 63, 65, 67, 69, 71, 73, 75, 77,	*/
-------------------------------------------------------------------------
/* program to generate prime number between two numbers */

class PrimeNumber{

	public static boolean isPrime(int number){

		boolean prime = true;
		if (number == 1) {
			prime = false;
			return prime;
		}
		for(int count=2; count<=(number/2); count++) {
			if (number%count == 0) {
				prime = false;
				return prime;
			}
		}

		return prime;
	}
}

class Test{

	public static void main(String[] args) {
	
		int from = 35;
		int to = 78;
		String primeNumbers = "";

		for(int count = from; count<=to; count++){
			if (PrimeNumber.isPrime(count) == true)
				primeNumbers = primeNumbers + count + ", ";
		}

		System.out.println("Prime numbers between " + from + " & " + to + " are " + primeNumbers);

	} 
}

/* result: 
Prime numbers between 35 & 78 are 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,	*/
